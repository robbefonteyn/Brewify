res_annot <- res_annot[sort(res_annot$P.Value,index.return=T)$ix,]
head(res_annot)
hist(res_annot$logFC)
#Stict conditions for logFC is 0.6, not super strict but due to underpowered study, this is necessary
genes_upreg <- res_annot$Entrez_ID[(res_annot$P.Value<0.05) & (res_annot$logFC > 0.6)]
# Remove the blank entrez IDs!
genes_upreg <- genes_upreg[genes_upreg != ""]
genes_upreg <- genes_upreg[!is.na(genes_upreg)]
length(genes_upreg)
# Downregulated genes
genes_downreg <- res_annot$Entrez_ID[(res_annot$P.Value< 0.05) & (res_annot$logFC < -0.6)]
# Remove the blank entrez IDs!
genes_downreg <- genes_downreg[genes_downreg != ""]
genes_downreg <- genes_downreg[!is.na(genes_downreg)]
length(genes_downreg)
res[res$gene_symbol == "SOX9", ]
pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = pData(raw_affy)$Samplename
)
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = pData(raw_affy)$Samplename + "shSOX9_III"
)
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = pData(raw_affy)$Samplename + c("shSOX9_III")
)
names <- pData(raw_affy)$Samplename
names <- pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = names
)
names
names <- append(names, "shSOX9_III")
names <- pData(raw_affy)$Samplename
names <- append(names, "shSOX9_III")
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = names
)
names <- pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = names
)
names
names <- pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = c("pLKO_I","pLKO_II","pLKO_III","shSOX9_I","shSOX9_II","shSOX9_III")
)
names <- pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = c("pLKO_II","pLKO_III","shSOX9_I","shSOX9_II","shSOX9_III")
)
names <- pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = c("pLKO_II","pLKO_III","shSOX9_I","shSOX9_II","shSOX9_III", "est")
)
names <- pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = c("pLKO_I","pLKO_II","pLKO_III","shSOX9_I","shSOX9_II","shSOX9_iii")
)
names <- pData(raw_affy)$Samplename
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = c("pLKO_I","pLKO_II","pLKO_III","shSOX9_I","shSOX9_II","shSOX9_III")
)
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = c("pLKO_I","pLKO_II","pLKO_III","shSOX9_I","shSOX9II","shSOX9III")
)
d <- exprs(rma_data)
boxplot(d,
main = "Boxplot after preprocessing",
xlab = "Samples",
names = c("pLKOI","pLKOII","pLKOIII","shSOX9I","shSOX9II","shSOX9III")
)
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2)
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
plot(LIMMAout$AveExpr, LIMMAout$logFC, color=factor(LIMMAout$adj.P.Val < 0.05), pch=20, cex=0.50, xlab="Average Intensities", ylab="logFC")
#dev.off()
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2)
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
plotMA(LIMMAout)
# MA-plot
#jpeg("MA_plot.jpeg")
limma::plotMA(fit2)
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2)
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
limma::plotMA(fit2, col=factor(LIMMAout$adj.P.Val < 0.05))
#dev.off()
?limma:plotMA
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2)
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
limma::plotMA(fit2, status=factor(LIMMAout$adj.P.Val < 0.05))
#dev.off()
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2)
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
limma::plotMA(fit2, plotWithHighlights=factor(LIMMAout$adj.P.Val < 0.05))
#dev.off()
?plotWithHighlights
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2)
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
limma::plotMA(fit2)
#dev.off()
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2,
main= "Volcanoplot")
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
limma::plotMA(fit2)
#dev.off()
# VolcanoPlot
#jpeg("Volcanoplot.jpeg")
volcanoplot(fit2)
#dev.off()
# MA-plot
#jpeg("MA_plot.jpeg")
plot(LIMMAout$AveExpr, LIMMAout$logFC, col=factor(LIMMAout$adj.P.Val < 0.05), pch=20, cex=0.50, xlab="Average Intensities", ylab="logFC")
#dev.off()
head(LIMMAout_annot)
LIMMAout_annot <- LIMMAout_sorted_limit[sort(LIMMAout_sorted_limit$P.Value, index.return=T)$ix,]
head(LIMMAout_annot)
conames(LIMMAout_annot)
colnames(LIMMAout_annot)
LIMMAout_annot <- LIMMAout_sorted_limit[sort(LIMMAout_sorted_limit$P.Value, index.return=T)$ix,]
head(LIMMAout_annot, 10)
LIMMAout_annot <- LIMMAout_sorted_limit[sort(LIMMAout_sorted_limit$P.Value, index.return=T)$ix,]
head(LIMMAout_annot, 50)
LIMMAout_annot <- LIMMAout_sorted_limit[sort(LIMMAout_sorted_limit$P.Value, index.return=T)$ix,]
head(LIMMAout_annot, 10)
res_DESeq_sign[res_DESeq_sign$Gene_symbol == "CCR7", ]
suppressMessages(library(edgeR))
suppressMessages(library(DESeq2))
suppressMessages(library(limma))
suppressMessages(library(tximport))
suppressMessages(library(tximeta))
suppressMessages(library(biomaRt))
accession_id <- "GSE218042"
huref <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
atr <- listAttributes(huref)
head(atr)
data <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'external_gene_name'),
mart = huref)
tx2gene <- dplyr::select(data, ensembl_transcript_id, ensembl_gene_id)
tx2gene <- dplyr::rename(tx2gene, TXNAME = ensembl_transcript_id)
tx2gene <- dplyr::rename(tx2gene, GENEID = ensembl_gene_id)
head(tx2gene)
files <- list.files("kallisto_quant")
files <- files[grep("abundance.tsv", files)]
samples <- unlist(strsplit(files, "_"))[c(1:length(files)) * 2 - 1]
files <- paste(rep("kallisto_quant/", length(files)), files, sep="")
names(files) <- samples
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE)
head(txi$counts)
dim(txi$counts)
sum(duplicated(rownames(txi$counts)))
mutation <- factor(c("shCCR7_2", "shCCR7_2", "shCCR7_1", "shCCR7_1", "shCONT", "shCONT"))
suppressMessages(dir.create("DESeq2"))
suppressMessages(setwd("./DESeq2"))
sampleTable <- data.frame(condition = mutation)
rownames(sampleTable) <- colnames(txi$counts)
dds <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)
dds <- DESeq(dds)
res_DESeq <- results(dds)
res_DESeq_ori <- res_DESeq
res_DESeq <- res_DESeq[order(res_DESeq$padj),]
res_DESeq <- res_DESeq[is.na(res_DESeq$padj)==F,]
data_sorted_DESeq <- data[sort(data$ensembl_gene_id,index.return=T)$ix,]
data_sorted_DESeq <- data_sorted_DESeq[!duplicated(data_sorted_DESeq$ensembl_gene_id),]
res_DESeq <- cbind(rownames(res_DESeq),res_DESeq)
colnames(res_DESeq)[1] <- "Ensembl_gene_id"
res_DESeq_sorted <- res_DESeq[sort(res_DESeq$Ensembl_gene_id,index.return=T)$ix,]
data_sorted_DESeq <- data_sorted_DESeq[data_sorted_DESeq$ensembl_gene_id %in% res_DESeq_sorted$Ensembl_gene_id,]
dim(res_DESeq_sorted)
dim(data_sorted_DESeq)
res_DESeq_sorted$Gene_symbol <- data_sorted_DESeq$external_gene_name
res_DESeq<-res_DESeq_sorted[sort(res_DESeq_sorted$pvalue,index.return=T)$ix,]
head(res_DESeq[,c(1,8,3,5,6,7)],10)
res_DESeq_sign<-res_DESeq[res_DESeq$padj<0.05,]
jpeg("Plot_dispEst_Homosapiens.jpg")
plotDispEsts(dds)
dev.off()
plotDispEsts(dds)
plotMA(res_DESeq_ori, ylim=c(-4,4))
hist(res_DESeq$log2FoldChange)
hist(res_DESeq$padj)
head(res_DESeq, 10)
library("limma")
library("WebGestaltR")
library("biomaRt")
res <- res_DESeq_sign
gene_symbols <- res$Gene_symbol
ensemble_IDs <- res$Ensembl_gene_id
save(res, file = "res.rda")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
ensembl <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
genes <- getBM(attributes=c("ensembl_gene_id","external_gene_name","entrezgene_id","transcript_length"), mart=ensembl)
print(dim(genes))
print(head(genes))
genes <- genes[!duplicated(genes$ensembl_gene_id), ]
print(dim(genes))
sum(res$Ensembl_gene_id%in%genes$ensembl_gene_id)
dim(res)
dim(genes)
res_sorted <- res[sort(res$Ensembl_gene_id,index.return=T)$ix,]
genes_sorted <- genes[sort(genes$ensembl_gene_id,index.return=T)$ix,]
genes_sorted <- genes_sorted[genes_sorted$ensembl_gene_id %in% res_sorted$Ensembl_gene_id,]
sum(res_sorted$Ensembl_gene_id == genes_sorted$ensembl_gene_id)
dim(res_sorted)
dim(genes_sorted)
res_sorted$gene_symbol <- genes_sorted$external_gene_name
res_sorted$Entrez_gene_id <- genes_sorted$entrezgene_id
res_sorted$transcript_length <- genes_sorted$transcript_length
# Sort on p - values
res_annot <- res_sorted[sort(res_sorted$padj,index.return=T)$ix,]
head(res_annot)
genes_upreg <- res_annot$Entrez_gene_id[(res_annot$padj<0.05) & (res_annot$log2FoldChange > 0.8)]
genes_upreg <- genes_upreg[genes_upreg != ""]
genes_upreg <- genes_upreg[!is.na(genes_upreg)]
length(genes_upreg)
genes_downreg <- res_annot$Entrez_gene_id[(res_annot$padj< 0.05) & (res_annot$log2FoldChange < -0.8)]
# Remove the blank entrez IDs!
genes_downreg <- genes_downreg[genes_downreg != ""]
genes_downreg <- genes_downreg[!is.na(genes_downreg)]
length(genes_downreg)
genes_ref <- res_annot$Entrez_gene_id
genes_ref <- genes_ref[genes_ref != ""]
length(genes_ref)
genes_ref <- genes_ref[!is.na(genes_ref)]
length(genes_ref)
GenesRefFileName<-"ORA_ensembl_ref.txt"
write.table(genes_ref,GenesRefFileName, sep="\n",col.names=F,row.names=F,quote=F)
GenesOIUpFileName<-"ORA_ensembl_upreg.txt"
write.table(genes_upreg,file=GenesOIUpFileName, sep="\n",col.names=F,row.names=F,quote=F)
GenesOIDownFileName<-"ORA_ensembl_downupreg.txt"
write.table(genes_downreg,file=GenesOIDownFileName, sep="\n",col.names=F,row.names=F,quote=F)
dir_name <- "KEGG"
working_dir <- getwd()
unlink(x=paste(working_dir,"/",dir_name,"/Project_ORA_upreg_Pathway_KEGG",sep=""),recursive=T,force=T)
if(!dir.exists(dir_name)){dir.create(dir_name)}
enrichResult <- WebGestaltR(enrichMethod="ORA",
organism="hsapiens",
enrichDatabase="pathway_KEGG",
interestGeneFile=GenesOIUpFileName,
interestGeneType="entrezgene",
referenceGeneFile=GenesRefFileName,
#referenceGene = genes_ref,
referenceGeneType="entrezgene",
dagColor="continuous",
sigMethod="top",topThr=10,minNum=5,
reportNum=40,
outputDirectory=dir_name,
projectName = paste("ORA_upreg_Pathway_",dir_name,sep=""))
unlink(x=paste(working_dir,"/",dir_name,"/Project_ORA_downreg_Pathway_KEGG",sep=""),
recursive=T,force=T)
if(!dir.exists(dir_name)){dir.create(dir_name)}
enrichResult <- WebGestaltR(enrichMethod="ORA",
organism="hsapiens",
enrichDatabase="pathway_KEGG",
interestGeneFile=GenesOIDownFileName,
interestGeneType="entrezgene",
#referenceGeneFile=GenesRefFileName,
referenceGene = genes_ref,
referenceGeneType="entrezgene",
dagColor="continuous",
sigMethod="top",topThr=10,minNum=5,reportNum=40,
outputDirectory=dir_name,
projectName=paste("ORA_downreg_Pathway_",dir_name,sep=""))
res_DESeq_sign[res_DESeq_sign$Gene_symbol == "CCR7", ]
res_DESeq[res_DESeq$Gene_symbol == "CCR7", ]
dim(res_DESeq_sign)
dim(res_DESeq)
upreg <- read.table("enrichment_results_ORA_upreg_Pathway_KEGG.txt", fill=T, sep = "\t", header = T)
upreg
downreg <- read.table("enrichment_results_ORA_downreg_Pathway_KEGG.txt", fill=T, sep = "\t", header = T)
downreg
setwd("C:/Users/Robbe Fonteyn/OneDrive - UGent/AJ 2023-2024/Biological Databases/Project/BrewMood/Statistics_beer_ratings")
setwd("C:/Users/Robbe Fonteyn/OneDrive - UGent/AJ 2023-2024/Biological Databases/Project/BrewMood")
setwd("C:/Users/Robbe Fonteyn/OneDrive - UGent/AJ 2023-2024/Biological Databases/Project/BrewMood/Statistics_beer_ratings")
beer_ratings <- read.table("ratebeer_ratings.txt", header=TRUE, sep="\t")
setwd("C:/Users/Robbe Fonteyn/OneDrive - UGent/AJ 2023-2024/Biological Databases/Project/BrewMood/Statistics_beer_ratings")
beer_ratings <- read.table("ratebeer_ratings_styles.txt", header=TRUE, sep="\t")
print(beer_ratings)
lenght(beer_ratings)
length(beer_ratings)
dim(beer_ratings)
setwd("C:/Users/Robbe Fonteyn/OneDrive - UGent/AJ 2023-2024/Biological Databases/Project/BrewMood/Untappd_ratings.txt")
# Function to create user profiles
create_user_profiles <- function(data) {
user_profiles <- data.frame()
unique_users <- unique(data$username)
for (user in unique_users) {
user_data <- data[data$username == user, ]
preferred_styles <- unique(user_data$user_data$taste_rating >= 8)
disliked_styles <- unique(user_data$user_data$taste_rating <= 4)
profile <- data.frame(
username = user,
preferred_styles = paste(preferred_styles, collapse = ", "),
disliked_styles = paste(disliked_styles, collapse = ", ")
)
user_profiles <- rbind(user_profiles, profile)
}
return(user_profiles)
}
# Generate user profiles
user_profiles <- create_user_profiles(beer_ratings)
# Print user profiles
print(user_profiles)
View(user_profiles)
# Function to create user profiles
create_user_profiles <- function(data) {
user_profiles <- data.frame()
unique_users <- unique(data$username)
for (user in unique_users) {
user_data <- data[data$username == user, ]
preferred_styles <- unique(user_data$user_data$taste_rating[user_data$taste_rating >= 8])
disliked_styles <- unique(user_data$user_data$taste_rating[user_data$taste_rating <= 4])
profile <- data.frame(
username = user,
preferred_styles = ifelse(length(preferred_styles) == 0, "None", paste(preferred_styles, collapse = ", ")),
disliked_styles = ifelse(length(disliked_styles) == 0, "None", paste(disliked_styles, collapse = ", "))
)
user_profiles <- rbind(user_profiles, profile)
}
return(user_profiles)
}
# Generate user profiles
user_profiles <- create_user_profiles(beer_ratings)
# Print user profiles
print(user_profiles)
# Function to extract preferred and disliked beer styles for each user
extract_preferences <- function(data) {
user_profiles <- data.frame(username = unique(data$username),
preferred_styles = character(),
disliked_styles = character(),
stringsAsFactors = FALSE)
for (user in unique(data$username)) {
user_data <- subset(data, username == user)
preferred <- subset(user_data, taste_rating >= 8)$beer_style
disliked <- subset(user_data, taste_rating <= 4)$beer_style
user_profiles[user_profiles$username == user, "preferred_styles"] <- toString(unique(preferred))
user_profiles[user_profiles$username == user, "disliked_styles"] <- toString(unique(disliked))
}
return(user_profiles)
}
# Create user profiles
user_profiles <- extract_preferences(beer_ratings)
beer_ratings <- read.table("ratebeer_ratings_styles.txt", header=TRUE, sep="\t")
extract_preferences <- function(data) {
user_profiles <- data.frame(username = unique(data$username),
preferred_styles = character(),
disliked_styles = character(),
stringsAsFactors = FALSE)
for (user in unique(data$username)) {
user_data <- subset(data, username == user)
preferred <- subset(user_data, taste_rating >= 8)$beer_style
disliked <- subset(user_data, taste_rating <= 4)$beer_style
user_profiles[user_profiles$username == user, "preferred_styles"] <- toString(unique(preferred))
user_profiles[user_profiles$username == user, "disliked_styles"] <- toString(unique(disliked))
}
return(user_profiles)
}
# Create user profiles
user_profiles <- extract_preferences(beer_ratings)
beer_ratings <- read.table("Userprofiles.txt", header=TRUE, sep="\t")
beer_ratings
user_profiles <- read.table("Userprofiles.txt", header=TRUE, sep="\t")
View(user_profiles)
# Load required libraries
library(stringr)
# Extract preferences and disliked using regular expressions
user_profiles$preference <- str_extract_all(user_profiles$preference, "\\w+")
user_profiles$disliked <- str_extract_all(user_profiles$disliked, "\\w+")
user_profiles
# Load required library
library(dplyr)
# Assuming your data is stored in a dataframe named 'beer_data'
# Clean up the data
beer_data_clean <- beer_data %>%
# Convert preference and disliked columns to character vectors
mutate(preference = sapply(preference, function(x) ifelse(length(x) == 0, NA, x)),
disliked = sapply(disliked, function(x) ifelse(length(x) == 0, NA, x))) %>%
# Remove NAs
na.omit()
user_profiles <- read.table("Userprofiles.txt", header=TRUE, sep="\t")
# Load required libraries
library(stringr)
# Extract preferences and disliked using regular expressions
user_profiles$preference <- str_extract_all(user_profiles$preference, "\\w+")
user_profiles$disliked <- str_extract_all(user_profiles$disliked, "\\w+")
user_profiles
# Load required library
library(dplyr)
# Assuming your data is stored in a dataframe named 'user_profiles'
# Clean up the data
user_profiles_clean <- user_profiles %>%
# Convert preference and disliked columns to character vectors
mutate(preference = sapply(preference, function(x) ifelse(length(x) == 0, NA, x)),
disliked = sapply(disliked, function(x) ifelse(length(x) == 0, NA, x))) %>%
# Remove NAs
na.omit()
# Function to extract combinations of preferences
get_preference_combinations <- function(df, style) {
df %>%
filter(!is.na(preference)) %>%
filter(style %in% preference) %>%
pull(username)
}
# Get statistics for each beer style
styles <- unique(unlist(user_profiles_clean$preference))
preference_stats <- lapply(styles, function(style) {
combination <- get_preference_combinations(user_profiles_clean, style)
comb_counts <- table(unlist(user_profiles_clean$preference))
data.frame(style = style,
preferred = paste(comb_counts[names(comb_counts) == style]),
combinations = paste(combination, collapse = ", "))
})
preference_stats_df <- do.call(rbind, preference_stats)
# Print the statistics
print(preference_stats_df)
View(preference_stats_df)
user_profiles <- read.table("Userprofiles.txt", header=TRUE, sep="\t")
# Load required libraries
library(stringr)
# Extract preferences and disliked using regular expressions
user_profiles$preference <- str_extract_all(user_profiles$preference, "\\w+")
user_profiles$disliked <- str_extract_all(user_profiles$disliked, "\\w+")
user_profiles
# Assuming your data is stored in a dataframe named 'user_profiles'
# Remove 'c' from preference and disliked columns
user_profiles$preference <- lapply(user_profiles$preference, function(x) gsub("c\\(|\\)", "", x))
user_profiles$disliked <- lapply(user_profiles$disliked, function(x) gsub("c\\(|\\)", "", x))
# Initialize empty lists to store preference and disliked pairs
preference_pairs <- list()
disliked_pairs <- list()
# Loop through the dataframe
for (i in 1:nrow(user_profiles)) {
prefs <- user_profiles$preference[i]
dislikes <- user_profiles$disliked[i]
# Generate all pairs of preferences
for (j in 1:(length(prefs) - 1)) {
for (k in (j + 1):length(prefs)) {
pair <- sort(c(prefs[j], prefs[k]))
preference_pairs <- append(preference_pairs, list(paste(pair, collapse = " - ")))
}
}
# Generate all pairs of dislikes
for (j in 1:(length(dislikes) - 1)) {
for (k in (j + 1):length(dislikes)) {
pair <- sort(c(dislikes[j], dislikes[k]))
disliked_pairs <- append(disliked_pairs, list(paste(pair, collapse = " - ")))
}
}
}
